---
layout: post
title: AOT DOWNFALL GUI
description: aot gui
summary: aot gui
tags: [lua]
---


```
-- wow congrats
-- idk why i obsufcated even though the developer will never fix the game
-- guess i was just embarresed to expose my terrible scripting skills

-- Eu's AOT Ui v 0.2 
-- Request more features on the thread Ill try to make em!

local lIl111I1il1iiIlllIiI1 = assert local IiiIll1ili111iii11i = select local liIIIlliiIIIll1Iil1 = tonumber local iiIil1ilii11lIlll1i = unpack local iiIiiI11lI11iliIII1 = pcall local lIl1lliii1IiiIiillI1I = setfenv local lIliliI1llIlIi11i1IIi = setmetatable local lIl1iiIIlliiiIiI1111i = type local lIil1ll1ll1I111i1i1 = getfenv local ll1IIl1lii1lllI11li = tostring local l1I111Ili11lili1lII = error local l1i1ii1ii1lll1il11i = string.sub local i1llI1II1il1111iill = string.byte local IIllIlllI1lIlIiilil = string.char local lI11I1iIIlIlIii1iiI = string.rep local lIliIiiIl1ilii1i1Il1I = string.gsub local lIlII11IIIiil1il1lIii = string.match local l11I1l1illiilll1iI1 = i1llI1II1il1111iill("9", 1) local lIl11lIllIiil1ll111ll, iili11iII1l11il111I = #{2455}, #{ 3159, 5970, 3958, 5844, 6048, 2484, 5444, 2084, 5331, 3118, 4406, 477, 3818, 2312, 1892, 1467, 527, 4017, 4924, 6512, 1790, 1965 } + l11I1l1illiilll1iI1 + 130992 local lIlllill1Ii11ii1IilIl = {} local II1IIIIililI11llI1i = 1 local IilIIiliI1li1li1ili, lIlillI1IillIlil1i111 local function ilIl11i1lI1iiIili1l(II1il1lilIIll11IiII, llIlllllIIilllllll1) local lllilII1Ili11iIiiII II1il1lilIIll11IiII = lIliIiiIl1ilii1i1Il1I(l1i1ii1ii1lll1il11i(II1il1lilIIll11IiII, 5), "..", function(i11liiiIilllliIlilI) if i1llI1II1il1111iill(i11liiiIilllliIlilI, 2) == 72 then lllilII1Ili11iIiiII = liIIIlliiIIIll1Iil1(l1i1ii1ii1lll1il11i(i11liiiIilllliIlilI, 1, 1)) return "" else local iIll1IlI11lllIIIiiI = IIllIlllI1lIlIiilil(liIIIlliiIIIll1Iil1(i11liiiIilllliIlilI, 16)) if lllilII1Ili11iIiiII then local iilIi11IIiil11I1Ili = lI11I1iIIlIlIii1iiI(iIll1IlI11lllIIIiiI, lllilII1Ili11iIiiII) lllilII1Ili11iIiiII = nil return iilIi11IIiil11I1Ili else return iIll1IlI11lllIIIiiI end end end) local function Illl1iiI111IiilllII() local lI11ll1Il1illllI1l1 = i1llI1II1il1111iill(II1il1lilIIll11IiII, II1IIIIililI11llI1i, II1IIIIililI11llI1i) II1IIIIililI11llI1i = II1IIIIililI11llI1i + 1 return lI11ll1Il1illllI1l1 end local function lIl1lIlIllIlililili1l() local lI11ll1Il1illllI1l1, iIll1IlI11lllIIIiiI, iilIi11IIiil11I1Ili, IllIiiIIililII11IIi = i1llI1II1il1111iill(II1il1lilIIll11IiII, II1IIIIililI11llI1i, II1IIIIililI11llI1i + 3) II1IIIIililI11llI1i = II1IIIIililI11llI1i + 4 return IllIiiIIililII11IIi * 16777216 + iilIi11IIiil11I1Ili * 65536 + iIll1IlI11lllIIIiiI * 256 + lI11ll1Il1illllI1l1 end local function iIIllIil111lll1IiIl(IlI1i1illI11iiIi1ii, il11lIiIl1lIl1ll1li, lIlIIiIIiiIIIli1Iii) if lIlIIiIIiiIIIli1Iii then local lI11iI1lil1lIil11Ii, IiIIiIIIIll1i1il11I = 0, 0 for lli1ilI1Il11IiiI11i = il11lIiIl1lIl1ll1li, lIlIIiIIiiIIIli1Iii do lI11iI1lil1lIil11Ii = lI11iI1lil1lIil11Ii + 2 ^ IiIIiIIIIll1i1il11I * iIIllIil111lll1IiIl(IlI1i1illI11iiIi1ii, lli1ilI1Il11IiiI11i) IiIIiIIIIll1i1il11I = IiIIiIIIIll1i1il11I + 1 end return lI11iI1lil1lIil11Ii else local I1l11ililiI1ll1I11i = 2 ^ (il11lIiIl1lIl1ll1li - 1) return I1l11ililiI1ll1I11i <= IlI1i1illI11iiIi1ii % (I1l11ililiI1ll1I11i + I1l11ililiI1ll1I11i) and 1 or 0 end end local function IllIlI1I11l111II1II() local lI11ll1Il1illllI1l1, iIll1IlI11lllIIIiiI = lIl1lIlIllIlililili1l(), lIl1lIlIllIlililili1l() if lI11ll1Il1illllI1l1 == 0 and iIll1IlI11lllIIIiiI == 0 then return 0 end return (-2 * iIIllIil111lll1IiIl(iIll1IlI11lllIIIiiI, 32) + 1) * 2 ^ (iIIllIil111lll1IiIl(iIll1IlI11lllIIIiiI, 21, 31) - 1023) * ((iIIllIil111lll1IiIl(iIll1IlI11lllIIIiiI, 1, 20) * 4294967296 + lI11ll1Il1illllI1l1) / 4503599627370496 + 1) end local i1lilI1ili1liiilill = function(lI11ll1Il1illllI1l1, iIll1IlI11lllIIIiiI) local iIliil1IIIiiilI1IiI = 1 local iilIi11IIiil11I1Ili = 0 while lI11ll1Il1illllI1l1 > 0 and iIll1IlI11lllIIIiiI > 0 do local l1lIlIIi1iII1l11li1 = lI11ll1Il1illllI1l1 % 2 local I1i11l11Ii11IIl1lIi = iIll1IlI11lllIIIiiI % 2 if l1lIlIIi1iII1l11li1 ~= I1i11l11Ii11IIl1lIi then iilIi11IIiil11I1Ili = iilIi11IIiil11I1Ili + iIliil1IIIiiilI1IiI end lI11ll1Il1illllI1l1 = (lI11ll1Il1illllI1l1 - l1lIlIIi1iII1l11li1) / 2 iIll1IlI11lllIIIiiI = (iIll1IlI11lllIIIiiI - I1i11l11Ii11IIl1lIi) / 2 iIliil1IIIiiilI1IiI = iIliil1IIIiiilI1IiI * 2 end if lI11ll1Il1illllI1l1 < iIll1IlI11lllIIIiiI then lI11ll1Il1illllI1l1 = iIll1IlI11lllIIIiiI end while lI11ll1Il1illllI1l1 > 0 do local l1lIlIIi1iII1l11li1 = lI11ll1Il1illllI1l1 % 2 if l1lIlIIi1iII1l11li1 > 0 then iilIi11IIiil11I1Ili = iilIi11IIiil11I1Ili + iIliil1IIIiiilI1IiI end lI11ll1Il1illllI1l1 = (lI11ll1Il1illllI1l1 - l1lIlIIi1iII1l11li1) / 2 iIliil1IIIiiilI1IiI = iIliil1IIIiiilI1IiI * 2 end return iilIi11IIiil11I1Ili end local function lI1ili1illIIliIIl1i(ilIl1iliiiiiIiII1li) local iIIiilIiilli1iiIIIi = { i1llI1II1il1111iill(II1il1lilIIll11IiII, II1IIIIililI11llI1i, II1IIIIililI11llI1i + 3) } II1IIIIililI11llI1i = II1IIIIililI11llI1i + 4 local lI11ll1Il1illllI1l1 = i1lilI1ili1liiilill(iIIiilIiilli1iiIIIi[1], lIlillI1IillIlil1i111) local iIll1IlI11lllIIIiiI = i1lilI1ili1liiilill(iIIiilIiilli1iiIIIi[2], lIlillI1IillIlil1i111) local iilIi11IIiil11I1Ili = i1lilI1ili1liiilill(iIIiilIiilli1iiIIIi[3], lIlillI1IillIlil1i111) local IllIiiIIililII11IIi = i1lilI1ili1liiilill(iIIiilIiilli1iiIIIi[4], lIlillI1IillIlil1i111) lIlillI1IillIlil1i111 = (181 * lIlillI1IillIlil1i111 + ilIl1iliiiiiIiII1li) % 256 return IllIiiIIililII11IIi * 16777216 + iilIi11IIiil11I1Ili * 65536 + iIll1IlI11lllIIIiiI * 256 + lI11ll1Il1illllI1l1 end local function liillIlIl111lIl1iii(i1i1I1ililIllil11lI) local lIlI11IIlilIIi11ll1Ii = lIl1lIlIllIlililili1l() local i1IIii1iI1lII1I1iII = "" for lli1ilI1Il11IiiI11i = 1, lIlI11IIlilIIi11ll1Ii do i1IIii1iI1lII1I1iII = i1IIii1iI1lII1I1iII .. IIllIlllI1lIlIiilil(i1lilI1ili1liiilill(i1llI1II1il1111iill(II1il1lilIIll11IiII, II1IIIIililI11llI1i + lli1ilI1Il11IiiI11i - 1), IilIIiliI1li1li1ili)) IilIIiliI1li1li1ili = (i1i1I1ililIllil11lI * IilIIiliI1li1li1ili + 5) % 256 end II1IIIIililI11llI1i = II1IIIIililI11llI1i + lIlI11IIlilIIi11ll1Ii return i1IIii1iI1lII1I1iII end IilIIiliI1li1li1ili = Illl1iiI111IiilllII() lIlillI1IillIlil1i111 = Illl1iiI111IiilllII() local function l111l1i1illiII1lI1i() local lIllll111lII1111Iil1I = { [101261] = {}, [73206] = {}, [95620] = {}, [69349] = {} } local Illi1lliIlili1II11l = lIl1lIlIllIlililili1l() - (#{ 3675, 144, 1791, 4844, 5587, 1293, 546, 3195, 5236, 4032, 6353, 475, 5644, 3731, 1068, 3008, 5565, 1456, 4847, 1928, 1775, 1411, 2885 } + l11I1l1illiilll1iI1 + 133686) local IlIlIilliiIIliiliI1 = Illl1iiI111IiilllII() for lli1ilI1Il11IiiI11i = lIl11lIllIiil1ll111ll, Illi1lliIlili1II11l do local lilil1111Ii1IiiiIi1 = {} local lIl1iiIIlliiiIiI1111i = Illl1iiI111IiilllII() if lIl1iiIIlliiiIiI1111i == #{ 6252, 3890, 810, 3043, 5954, 2183, 2298, 6418, 555, 1772, 6736, 1103, 4339, 390, 4082, 3096, 550, 6669, 4715, 4204, 1507, 5267, 1449 } + l11I1l1illiilll1iI1 + -30 then lilil1111Ii1IiiiIi1[55600] = liillIlIl111lIl1iii(IlIlIilliiIIliiliI1) end if lIl1iiIIlliiiIiI1111i == #{ 1475, 1493, 3919, 2050, 4702, 2771, 6655, 6747, 4473, 258, 5468, 1925, 4906, 701, 2115, 3588, 3697, 5497, 2751, 3641, 3827, 4429, 3984 } + l11I1l1illiilll1iI1 + 7 then lilil1111Ii1IiiiIi1[55600] = IllIlI1I11l111II1II() end if lIl1iiIIlliiiIiI1111i == #{ 2176, 2754, 1934, 5540, 4083, 4851, 3798, 2476, 432, 4364, 1287, 2799, 394, 5175, 5526, 5825, 5665, 5819, 4644, 1631, 2236, 5235, 4084, 623 } + l11I1l1illiilll1iI1 + 5 then lilil1111Ii1IiiiIi1[55600] = Illl1iiI111IiilllII() end if lIl1iiIIlliiiIiI1111i == #{ 5760, 1463, 6269, 6800, 1256, 3530, 3390, 4452, 874, 534, 5355, 5548, 5424, 3946, 6654, 1934, 6091, 3463, 3006, 869 } + l11I1l1illiilll1iI1 + 143 then lilil1111Ii1IiiiIi1[55600] = liillIlIl111lIl1iii(#{ 4833, 2952, 5457, 2521, 22, 6670, 6487, 6252, 2528, 3142, 5784, 5826, 3351, 3916, 3500, 742, 6316, 4110, 5311, 2520 } + l11I1l1illiilll1iI1 + 43) end if lIl1iiIIlliiiIiI1111i == #{ 3376, 1830, 5161, 6733, 5955, 5254, 6290, 6259, 1745, 5801, 4662, 5842, 6448, 346, 1206, 4882, 913, 6851, 6505, 603, 449, 4215, 5878, 5144 } + l11I1l1illiilll1iI1 + 7 then lilil1111Ii1IiiiIi1[55600] = #{ 6759, 5416, 5456, 1598, 2536, 3987, 952, 5044, 6364, 5493, 1347, 5762, 6260, 3649, 6213, 1999, 5855, 2940, 1170, 2955, 33, 5174, 6606 } + l11I1l1illiilll1iI1 + 40859 == #{ 6759, 5416, 5456, 1598, 2536, 3987, 952, 5044, 6364, 5493, 1347, 5762, 6260, 3649, 6213, 1999, 5855, 2940, 1170, 2955, 33, 5174, 6606 } + l11I1l1illiilll1iI1 + 40859 end if lIl1iiIIlliiiIiI1111i == #{ 3915, 1129, 5282, 5852, 3178, 6019, 6796, 6606, 5770, 2735, 3424, 843, 5585, 6819, 6766, 6075, 2974, 6086, 6096, 1736, 3636, 355, 6575 } + l11I1l1illiilll1iI1 + 40 then lilil1111Ii1IiiiIi1[55600] = Illl1iiI111IiilllII() + lIl1lIlIllIlililili1l() + IllIlI1I11l111II1II() end if lIl1iiIIlliiiIiI1111i == #{ 3414, 6421, 5770, 3972, 6732, 5204, 4522 } then lilil1111Ii1IiiiIi1[55600] = Illl1iiI111IiilllII() end if lIl1iiIIlliiiIiI1111i == #{ 4015, 5472, 4657, 6227, 4466, 333, 3397, 5046, 3923, 4335, 6137, 1578, 6173, 2733, 1340, 3243, 778, 948, 3576, 5135, 4796, 2966, 4163, 5296 } + l11I1l1illiilll1iI1 + 58 then lilil1111Ii1IiiiIi1[55600] = #{ 353, 195, 6204, 5693, 3894, 912, 6451, 2214, 5900, 6346, 6866, 3272, 4277, 1310, 6302, 2067, 6429, 3114, 5625, 6582, 6141, 6034, 5990 } + l11I1l1illiilll1iI1 + 52207 == #{ 2662, 3883, 4106, 587, 5909, 3298, 748, 275, 851, 524, 1636, 339, 2, 1504, 4651, 5530, 3904, 6515, 6529, 4501 } + l11I1l1illiilll1iI1 + 130672 end if lIl1iiIIlliiiIiI1111i == #{ 6332, 1914, 4530, 6070, 6702, 5067, 4925, 466, 6167, 2296, 1392, 2000, 2076, 1560, 2119, 137, 4562, 3926, 1440, 4115, 6702 } + l11I1l1illiilll1iI1 + 69 then lilil1111Ii1IiiiIi1[55600] = liillIlIl111lIl1iii(IlIlIilliiIIliiliI1) end lIllll111lII1111Iil1I[69349][lli1ilI1Il11IiiI11i - lIl11lIllIiil1ll111ll] = lilil1111Ii1IiiiIi1 end Illl1iiI111IiilllII() lIl1lIlIllIlililili1l() local Illi1lliIlili1II11l = lIl1lIlIllIlililili1l() - (#{ 5914, 6853, 3605, 2970, 3773, 4750, 2096, 6926, 6308, 3941, 4080, 1617, 4843, 1694, 231, 3410, 207, 1555, 2611, 913, 2041, 5089, 2415, 402 } + l11I1l1illiilll1iI1 + 133625) local iil11lI11I11II1illI = Illl1iiI111IiilllII() for lli1ilI1Il11IiiI11i = lIl11lIllIiil1ll111ll, Illi1lliIlili1II11l do local iI1li11lII1li1lIIIi = {} local i1IiiIll1IliI1l1l1l = lI1ili1illIIliIIl1i(iil11lI11I11II1illI) iI1li11lII1li1lIIIi[15223] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{2054}, #{ 5705, 48, 1878, 6453, 6810, 349, 3334, 6471, 4055, 750, 6742, 6674, 1057, 836, 916, 4611, 6715, 5871 }) iI1li11lII1li1lIIIi[40774] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{3254}, #{ 3523, 242, 2743, 4763, 5474, 3191, 6858, 5612, 4395, 746, 2672, 709, 851, 3131, 1800, 1957, 2947, 2049 }) iI1li11lII1li1lIIIi[100813] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{ 1091, 1849, 1820, 4641, 59, 3222, 4468, 2532, 6294, 1176 }, #{ 3787, 4680, 3385, 5180, 871, 4498, 6128, 2613, 1164, 5777, 5945, 1280, 6948, 2716, 3792, 4258, 6899, 3400 }) iI1li11lII1li1lIIIi[132849] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{ 1945, 6203, 1189, 2299, 5655, 6209, 2428, 3537, 4823, 2047, 2500, 6647, 2103, 5237, 5624, 6146, 4062, 6828, 4275, 6718 } + l11I1l1illiilll1iI1 + -50, #{ 3794, 5337, 2908, 5611, 5425, 1872, 721, 3671, 6578, 4004, 4248, 3558, 5951, 5883, 5507, 6660, 1733, 3496, 6678, 589, 3653, 4468, 2705 } + l11I1l1illiilll1iI1 + -48) iI1li11lII1li1lIIIi[20276] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{ 4686, 2563, 3489, 3700, 4921, 4874, 4323, 5200, 4208, 2255, 3405, 629, 1335, 185, 3823, 412, 1916, 2367, 2009 }, #{ 3174, 3079, 6681, 954, 1595, 1139, 5441, 2898, 2581, 5484, 5891, 5427, 6083, 467, 4738, 991, 6463, 1311, 5058, 6173, 4883, 6350, 6614, 5942 } + l11I1l1illiilll1iI1 + -55) iI1li11lII1li1lIIIi[124771] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{1290}, #{ 3069, 4559, 4895, 2743, 4378, 579, 6917, 3901, 6669 }) iI1li11lII1li1lIIIi[32378] = iIIllIil111lll1IiIl(i1IiiIll1IliI1l1l1l, #{1442}, #{ 5118, 6867, 4012, 4549, 6099, 3802, 1183, 2932, 3989 }) lIllll111lII1111Iil1I[95620][lli1ilI1Il11IiiI11i] = iI1li11lII1li1lIIIi end local Illi1lliIlili1II11l = lIl1lIlIllIlililili1l() for lli1ilI1Il11IiiI11i = lIl11lIllIiil1ll111ll, Illi1lliIlili1II11l do lIllll111lII1111Iil1I[101261][lli1ilI1Il11IiiI11i] = lIl1lIlIllIlililili1l() end lIllll111lII1111Iil1I[63873] = Illl1iiI111IiilllII() lIllll111lII1111Iil1I[88599] = Illl1iiI111IiilllII() local Illi1lliIlili1II11l = lIl1lIlIllIlililili1l() for lli1ilI1Il11IiiI11i = lIl11lIllIiil1ll111ll, Illi1lliIlili1II11l do lIllll111lII1111Iil1I[73206][lli1ilI1Il11IiiI11i - lIl11lIllIiil1ll111ll] = l111l1i1illiII1lI1i() end Illl1iiI111IiilllII() lIllll111lII1111Iil1I[94946] = Illl1iiI111IiilllII() Illl1iiI111IiilllII() lIl1lIlIllIlililili1l() lIl1lIlIllIlililili1l() return lIllll111lII1111Iil1I end local function lIl1l1l11i1l11IlIilil(lIllll111lII1111Iil1I, llIlllllIIilllllll1, lIlllI1liilI1iiIIiIil) local II1ili1Illll1iilii1, ll1IiIl1l1IiiIliIil = 25, 31 local lIiIlIllillliilIl11 = lIllll111lII1111Iil1I[95620] local liilI1111Ii11iIliI1 = lIliliI1llIlIi11i1IIi({}, { __index = function(lIliili1ilIlIl1I111Ii, lIlI1li1i1li1l1I1Il1i) local i1IIii1iI1lII1I1iII = lIllll111lII1111Iil1I[69349][lIlI1li1i1li1l1I1Il1i] if l1i1ii1ii1lll1il11i(lIl1iiIIlliiiIiI1111i(i1IIii1iI1lII1I1iII[55600]), 1, 1) == "s" then return { [55600] = l1i1ii1ii1lll1il11i(i1IIii1iI1lII1I1iII[55600], 2) } end return i1IIii1iI1lII1I1iII end }) local l1I1l1l1l1iIli1lIii = 94946 local lIllliiiill1lI1llllIi = lIllll111lII1111Iil1I[73206] local lIllI1liliiIiiIIlli1l = 55600 local li1lIiiliIl1iIliiIl = lIllll111lII1111Iil1I[88599] local lIl1I1iIliIlII11Ii1ll = lIllll111lII1111Iil1I[63873] local lIl11ilI1iiIIll11lli1 = 132849 local lll1IIlI1Ilii1lI1lI = lIllll111lII1111Iil1I[101261] local iiI1lliliill1ilii1i = 124771 local function lIll1lI111Iil1i1Ii11l(...) local i1iiiliI1illi1lIIIi = 0 local lIlllIl11I1IIII1iIi1I = { iiIil1ilii11lIlll1i({}, 1, lIl1I1iIliIlII11Ii1ll) } local lIlillIlI1i1llilI11ll = 1 local lIlIlIIil1lil1ilIIil1 = {} local lIlIiiI1iIiiilIl1ilI1 = {} local llIlllllIIilllllll1 = lIil1ll1ll1I111i1i1() local l1Ili1li1IIIlii11iI = { ... } local Il1Ii1iI11IIIi1IiI1 = #l1Ili1li1IIIlii11iI - 1 for lli1ilI1Il11IiiI11i = 0, Il1Ii1iI11IIIi1IiI1 do if lli1ilI1Il11IiiI11i < li1lIiiliIl1iIliiIl then lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = l1Ili1li1IIIlii11iI[lli1ilI1Il11IiiI11i + 1] end end local function lIl1llI1IiI1I1il1Iiil(...) local iilIi11IIiil11I1Ili = IiiIll1ili111iii11i("#", ...) local lIliili1ilIlIl1I111Ii = { ... } return iilIi11IIiil11I1Ili, lIliili1ilIlIl1I111Ii end local function Ii11li1lliIiI1Ii1Il() while true do local Ii1li1I1il1IIlii11I = lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] local l1l1iiIliliilIi1Ii1 = Ii1li1I1il1IIlii11I[132849] lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 local lIiIiI1Il1ilI1Illil = Ii1li1I1il1IIlii11I[40774] local Ili1il1lIllI11I1Iil = Ii1li1I1il1IIlii11I[124771] local ll1ilI1iIIli1lIIiIi = Ii1li1I1il1IIlii11I[40774] - iili11iII1l11il111I local llI1ill1IiI11I1lili = Ii1li1I1il1IIlii11I[100813] local iI1ilI1l1IIiIiiII11 = Ii1li1I1il1IIlii11I[20276] if l1l1iiIliliilIi1Ii1 < 18 then if l1l1iiIliliilIi1Ii1 < 9 then if l1l1iiIliliilIi1Ii1 < 4 then if l1l1iiIliliilIi1Ii1 < 2 then if l1l1iiIliliilIi1Ii1 ~= 1 then local lIlIii1lllll1i1l1IiI1 = {} for lIliiII1i11ilIlI1lll1, l11I1l1IIi1l11IIi1i in pairs(lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I]) do for lIliiII1i11ilIlI1lll1, lIlli1il1iIiiIll111Il in pairs(l11I1l1IIi1l11IIi1i) do if lIlli1il1iIiiIll111Il[1] == lIlllIl11I1IIII1iIi1I and iI1ilI1l1IIiIiiII11 <= lIlli1il1iIiiIll111Il[2] then local lIl1iIlliIIIIIi1IIl1i = lIlli1il1iIiiIll111Il[2] if not lIlIii1lllll1i1l1IiI1[lIl1iIlliIIIIIi1IIl1i] then table.insert(lIlIiiI1iIiiilIl1ilI1, lIlllIl11I1IIII1iIi1I[lIl1iIlliIIIIIi1IIl1i]) lIlIii1lllll1i1l1IiI1[lIl1iIlliIIIIIi1IIl1i] = #lIlIiiI1iIiiilIl1ilI1 end lIlli1il1iIiiIll111Il[1] = lIlIiiI1iIiiilIl1ilI1 lIlli1il1iIiiIll111Il[2] = lIlIii1lllll1i1l1IiI1[lIl1iIlliIIIIIi1IIl1i] end end end else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = liilI1111Ii11iIliI1[lIiIiI1Il1ilI1Illil][lIllI1liliiIiiIIlli1l] end elseif l1l1iiIliliilIi1Ii1 ~= 3 then lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = #lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] else local iiiIIlii1I1Iii1lilI, lIl1lIII111IlIlIl1l1i, Ii11li1lliIiI1Ii1Il if Ili1il1lIllI11I1Iil ~= 1 then if Ili1il1lIllI11I1Iil ~= 0 then lIl1lIII111IlIlIl1l1i = iI1ilI1l1IIiIiiII11 + Ili1il1lIllI11I1Iil - 1 else lIl1lIII111IlIlIl1l1i = i1iiiliI1illi1lIIIi end lIl1lIII111IlIlIl1l1i, iiiIIlii1I1Iii1lilI = lIl1llI1IiI1I1il1Iiil(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11](iiIil1ilii11lIlll1i(lIlllIl11I1IIII1iIi1I, iI1ilI1l1IIiIiiII11 + 1, lIl1lIII111IlIlIl1l1i))) else lIl1lIII111IlIlIl1l1i, iiiIIlii1I1Iii1lilI = lIl1llI1IiI1I1il1Iiil(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11]()) end if llI1ill1IiI11I1lili ~= 1 then if llI1ill1IiI11I1lili ~= 0 then lIl1lIII111IlIlIl1l1i = iI1ilI1l1IIiIiiII11 + llI1ill1IiI11I1lili - 2 i1iiiliI1illi1lIIIi = lIl1lIII111IlIlIl1l1i + 1 else lIl1lIII111IlIlIl1l1i = lIl1lIII111IlIlIl1l1i + iI1ilI1l1IIiIiiII11 - 1 i1iiiliI1illi1lIIIi = lIl1lIII111IlIlIl1l1i end Ii11li1lliIiI1Ii1Il = 0 for lli1ilI1Il11IiiI11i = iI1ilI1l1IIiIiiII11, lIl1lIII111IlIlIl1l1i do Ii11li1lliIiI1Ii1Il = Ii11li1lliIiI1Ii1Il + 1 lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = iiiIIlii1I1Iii1lilI[Ii11li1lliIiI1Ii1Il] end else i1iiiliI1illi1lIIIi = iI1ilI1l1IIiIiiII11 - 1 end for lli1ilI1Il11IiiI11i = i1iiiliI1illi1lIIIi + 1, lIl1I1iIliIlII11Ii1ll do lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = nil end end elseif l1l1iiIliliilIi1Ii1 >= 6 then if l1l1iiIliliilIi1Ii1 < 7 then local Il1II111illl1l1i1ii = lIllliiiill1lI1llllIi[lIiIiI1Il1ilI1Illil] local IllIi1ill1lililll1l = {} if Il1II111illl1l1i1ii[l1I1l1l1l1iIli1lIii] > 0 then do local l11I1l1IIi1l11IIi1i = {} IllIi1ill1lililll1l = lIliliI1llIlIi11i1IIi({}, { __index = function(lIliili1ilIlIl1I111Ii, lIlI1li1i1li1l1I1Il1i) local lIlli1il1iIiiIll111Il = l11I1l1IIi1l11IIi1i[lIlI1li1i1li1l1I1Il1i] return lIlli1il1iIiiIll111Il[1][lIlli1il1iIiiIll111Il[2]] end, __newindex = function(lIliili1ilIlIl1I111Ii, lIlI1li1i1li1l1I1Il1i, il1IIllII1IIIIi11ii) local lIlli1il1iIiiIll111Il = l11I1l1IIi1l11IIi1i[lIlI1li1i1li1l1I1Il1i] lIlli1il1iIiiIll111Il[1][lIlli1il1iIiiIll111Il[2]] = il1IIllII1IIIIi11ii end }) for lli1ilI1Il11IiiI11i = 1, Il1II111illl1l1i1ii[l1I1l1l1l1iIli1lIii] do local lIl1i1iliilIiiIi11IIi = lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] if lIl1i1iliilIiiIi11IIi[lIl11ilI1iiIIll11lli1] == II1ili1Illll1iilii1 then l11I1l1IIi1l11IIi1i[lli1ilI1Il11IiiI11i - 1] = { lIlllIl11I1IIII1iIi1I, lIl1i1iliilIiiIi11IIi[iiI1lliliill1ilii1i] } elseif lIl1i1iliilIiiIi11IIi[lIl11ilI1iiIIll11lli1] == ll1IiIl1l1IiiIliIil then l11I1l1IIi1l11IIi1i[lli1ilI1Il11IiiI11i - 1] = { lIlllI1liilI1iiIIiIil, lIl1i1iliilIiiIi11IIi[iiI1lliliill1ilii1i] } end lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end if not lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I] then lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I] = {l11I1l1IIi1l11IIi1i} else table.insert(lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I], l11I1l1IIi1l11IIi1i) end end end local ii1iIi1ll11I1iIIlll = lIl1l1l11i1l11IlIilil(Il1II111illl1l1i1ii, llIlllllIIilllllll1, IllIi1ill1lililll1l) lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = ii1iIi1ll11I1iIIlll elseif l1l1iiIliliilIi1Ii1 ~= 8 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil / llI1ill1IiI11I1lili else if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11][Ili1il1lIllI11I1Iil] = llI1ill1IiI11I1lili end elseif l1l1iiIliliilIi1Ii1 == 5 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil * llI1ill1IiI11I1lili else if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil ^ llI1ill1IiI11I1lili end elseif l1l1iiIliliilIi1Ii1 < 13 then if l1l1iiIliliilIi1Ii1 < 11 then if l1l1iiIliliilIi1Ii1 == 10 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil - llI1ill1IiI11I1lili else lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I] = nil local iiiIIlii1I1Iii1lilI, lIl1lIII111IlIlIl1l1i if Ili1il1lIllI11I1Iil ~= 1 then if Ili1il1lIllI11I1Iil ~= 0 then lIl1lIII111IlIlIl1l1i = iI1ilI1l1IIiIiiII11 + Ili1il1lIllI11I1Iil - 1 else lIl1lIII111IlIlIl1l1i = i1iiiliI1illi1lIIIi end lIl1lIII111IlIlIl1l1i, iiiIIlii1I1Iii1lilI = lIl1llI1IiI1I1il1Iiil(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11](iiIil1ilii11lIlll1i(lIlllIl11I1IIII1iIi1I, iI1ilI1l1IIiIiiII11 + 1, lIl1lIII111IlIlIl1l1i))) else lIl1lIII111IlIlIl1l1i, iiiIIlii1I1Iii1lilI = lIl1llI1IiI1I1il1Iiil(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11]()) end lIlllIl11I1IIII1iIi1I = iiiIIlii1I1Iii1lilI return true, 1, lIl1lIII111IlIlIl1l1i end elseif l1l1iiIliliilIi1Ii1 == 12 then local lIlliI1i1I1l11l1IIliI = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] for lli1ilI1Il11IiiI11i = Ili1il1lIllI11I1Iil + 1, llI1ill1IiI11I1lili do lIlliI1i1I1l11l1IIliI = lIlliI1i1I1l11l1IIliI .. lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlliI1i1I1l11l1IIliI else local I1ii1Illl111IlliIil = iI1ilI1l1IIiIiiII11 + 2 local lIlliI1i1I1l11l1IIliI = { lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11](lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1], lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2]) } for lli1ilI1Il11IiiI11i = 1, llI1ill1IiI11I1lili do lIlllIl11I1IIII1iIi1I[I1ii1Illl111IlliIil + lli1ilI1Il11IiiI11i] = lIlliI1i1I1l11l1IIliI[lli1ilI1Il11IiiI11i] end if lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 3] ~= nil then lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2] = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 3] else lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end end elseif l1l1iiIliliilIi1Ii1 < 15 then if l1l1iiIliliilIi1Ii1 ~= 14 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil % llI1ill1IiI11I1lili elseif not not lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] == (llI1ill1IiI11I1lili == 0) then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end elseif l1l1iiIliliilIi1Ii1 < 16 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end if Ili1il1lIllI11I1Iil <= llI1ill1IiI11I1lili ~= (iI1ilI1l1IIiIiiII11 ~= 0) then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end elseif l1l1iiIliliilIi1Ii1 ~= 17 then Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1] = Ili1il1lIllI11I1Iil lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil[llI1ill1IiI11I1lili] else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = { iiIil1ilii11lIlll1i(lIlllill1Ii11ii1IilIl, 1, Ili1il1lIllI11I1Iil == 0 and 255 or Ili1il1lIllI11I1Iil) } end elseif l1l1iiIliliilIi1Ii1 < 27 then if l1l1iiIliliilIi1Ii1 >= 22 then if l1l1iiIliliilIi1Ii1 < 24 then if l1l1iiIliliilIi1Ii1 ~= 23 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end if Ili1il1lIllI11I1Iil == llI1ill1IiI11I1lili ~= (iI1ilI1l1IIiIiiII11 ~= 0) then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end else lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + ll1ilI1iIIli1lIIiIi end elseif l1l1iiIliliilIi1Ii1 < 25 then llIlllllIIilllllll1[liilI1111Ii11iIliI1[lIiIiI1Il1ilI1Illil][lIllI1liliiIiiIIlli1l]] = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] elseif l1l1iiIliliilIi1Ii1 == 26 then if llI1ill1IiI11I1lili == 215 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 27, [20276] = (iI1ilI1l1IIiIiiII11 - 62) % 256, [124771] = (Ili1il1lIllI11I1Iil - 62) % 256, [40774] = 0 } else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = not lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end elseif llI1ill1IiI11I1lili == 23 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 11, [20276] = (iI1ilI1l1IIiIiiII11 - 249) % 256, [100813] = (Ili1il1lIllI11I1Iil - 249) % 256, [40774] = 0 } else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end elseif l1l1iiIliliilIi1Ii1 < 20 then if l1l1iiIliliilIi1Ii1 ~= 19 then if llI1ill1IiI11I1lili == 24 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 32, [20276] = (iI1ilI1l1IIiIiiII11 - 250) % 256, [124771] = (Ili1il1lIllI11I1Iil - 250) % 256, [40774] = 0 } elseif llI1ill1IiI11I1lili == 224 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 14, [20276] = (iI1ilI1l1IIiIiiII11 - 114) % 256, [100813] = (Ili1il1lIllI11I1Iil - 114) % 256, [40774] = 0 } else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = -lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil ~= 0 if llI1ill1IiI11I1lili ~= 0 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 end end elseif l1l1iiIliliilIi1Ii1 == 21 then lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = llIlllllIIilllllll1[liilI1111Ii11iIliI1[lIiIiI1Il1ilI1Illil][lIllI1liliiIiiIIlli1l]] elseif llI1ill1IiI11I1lili == 40 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 31, [20276] = (iI1ilI1l1IIiIiiII11 - 207) % 256, [124771] = (Ili1il1lIllI11I1Iil - 207) % 256, [40774] = 0 } else for lli1ilI1Il11IiiI11i = iI1ilI1l1IIiIiiII11, Ili1il1lIllI11I1Iil do lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = nil end end elseif l1l1iiIliliilIi1Ii1 < 32 then if l1l1iiIliliilIi1Ii1 < 29 then if l1l1iiIliliilIi1Ii1 ~= 28 then if llI1ill1IiI11I1lili == 181 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 25, [20276] = (iI1ilI1l1IIiIiiII11 - 149) % 256, [124771] = (Ili1il1lIllI11I1Iil - 149) % 256, [40774] = 0 } elseif llI1ill1IiI11I1lili == 49 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 2, [20276] = (iI1ilI1l1IIiIiiII11 - 249) % 256, [124771] = (Ili1il1lIllI11I1Iil - 249) % 256, [40774] = 0 } else lIlIlIIil1lil1ilIIil1[lIlllIl11I1IIII1iIi1I] = nil if Ili1il1lIllI11I1Iil == 1 then return true end local lIl1lIII111IlIlIl1l1i = iI1ilI1l1IIiIiiII11 + Ili1il1lIllI11I1Iil - 2 if Ili1il1lIllI11I1Iil == 0 then lIl1lIII111IlIlIl1l1i = i1iiiliI1illi1lIIIi end return true, iI1ilI1l1IIiIiiII11, lIl1lIII111IlIlIl1l1i end else local I1ii1Illl111IlliIil = (llI1ill1IiI11I1lili - 1) * 50 if Ili1il1lIllI11I1Iil == 0 then Ili1il1lIllI11I1Iil = i1iiiliI1illi1lIIIi - iI1ilI1l1IIiIiiII11 end for lli1ilI1Il11IiiI11i = 1, Ili1il1lIllI11I1Iil do lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11][I1ii1Illl111IlliIil + lli1ilI1Il11IiiI11i] = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + lli1ilI1Il11IiiI11i] end end elseif l1l1iiIliliilIi1Ii1 >= 30 then if l1l1iiIliliilIi1Ii1 ~= 31 then lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIl111I1il1iiIlllIiI1(liIIIlliiIIIll1Iil1(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11]), "`for` initial value must be a number") lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1] = lIl111I1il1iiIlllIiI1(liIIIlliiIIIll1Iil1(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1]), "`for` limit value must be a number") lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2] = lIl111I1il1iiIlllIiI1(liIIIlliiIIIll1Iil1(lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2]), "`for` step value must be a number") lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] - lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2] lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + ll1ilI1iIIli1lIIiIi else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlllI1liilI1iiIIiIil[Ili1il1lIllI11I1Iil] end elseif not not lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] == (llI1ill1IiI11I1lili == 0) then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + 1 else lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end elseif l1l1iiIliliilIi1Ii1 < 34 then if l1l1iiIliliilIi1Ii1 ~= 33 then if llI1ill1IiI11I1lili == 68 then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll - 1 lIiIlIllillliilIl11[lIlillIlI1i1llilI11ll] = { [132849] = 20, [20276] = (iI1ilI1l1IIiIiiII11 - 219) % 256, [124771] = (Ili1il1lIllI11I1Iil - 219) % 256, [40774] = 0 } else lIlllI1liilI1iiIIiIil[Ili1il1lIllI11I1Iil] = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] end else local lllIIlll1IiIililIll = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 2] local II1IIIIililI11llI1i = lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] + lllIIlll1IiIililIll lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = II1IIIIililI11llI1i if lllIIlll1IiIililIll > 0 then if II1IIIIililI11llI1i <= lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1] then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + ll1ilI1iIIli1lIIiIi lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 3] = II1IIIIililI11llI1i end elseif II1IIIIililI11llI1i >= lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 1] then lIlillIlI1i1llilI11ll = lIlillIlI1i1llilI11ll + ll1ilI1iIIli1lIIiIi lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11 + 3] = II1IIIIililI11llI1i end end elseif l1l1iiIliliilIi1Ii1 < 35 then local iii1l11iIIll1Ill1iI = Ili1il1lIllI11I1Iil > 0 and Ili1il1lIllI11I1Iil - 1 or Il1Ii1iI11IIIi1IiI1 - li1lIiiliIl1iIliiIl if iii1l11iIIll1Ill1iI < 0 then iii1l11iIIll1Ill1iI = -1 end for lli1ilI1Il11IiiI11i = iI1ilI1l1IIiIiiII11, iI1ilI1l1IIiIiiII11 + iii1l11iIIll1Ill1iI do lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = l1Ili1li1IIIlii11iI[li1lIiiliIl1iIliiIl + (lli1ilI1Il11IiiI11i - iI1ilI1l1IIiIiiII11) + 1] end if Ili1il1lIllI11I1Iil == 0 then i1iiiliI1illi1lIIIi = iI1ilI1l1IIiIiiII11 + iii1l11iIIll1Ill1iI for lli1ilI1Il11IiiI11i = i1iiiliI1illi1lIIIi + 1, lIl1I1iIliIlII11Ii1ll do lIlllIl11I1IIII1iIi1I[lli1ilI1Il11IiiI11i] = nil end end elseif l1l1iiIliliilIi1Ii1 ~= 36 then if Ili1il1lIllI11I1Iil > 255 then Ili1il1lIllI11I1Iil = liilI1111Ii11iIliI1[Ili1il1lIllI11I1Iil - 256][lIllI1liliiIiiIIlli1l] else Ili1il1lIllI11I1Iil = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil] end if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = Ili1il1lIllI11I1Iil + llI1ill1IiI11I1lili else if llI1ill1IiI11I1lili > 255 then llI1ill1IiI11I1lili = liilI1111Ii11iIliI1[llI1ill1IiI11I1lili - 256][lIllI1liliiIiiIIlli1l] else llI1ill1IiI11I1lili = lIlllIl11I1IIII1iIi1I[llI1ill1IiI11I1lili] end lIlllIl11I1IIII1iIi1I[iI1ilI1l1IIiIiiII11] = lIlllIl11I1IIII1iIi1I[Ili1il1lIllI11I1Iil][llI1ill1IiI11I1lili] end end end local liil111il1ll1ii1lll, i1IIii1iI1lII1I1iII, l1l1I111lIll11Ii111, III11Ii1i1llIlllI1I = iiIiiI11lI11iliIII1(Ii11li1lliIiI1Ii1Il) if liil111il1ll1ii1lll then if l1l1I111lIll11Ii111 then return iiIil1ilii11lIlll1i(lIlllIl11I1IIII1iIi1I, l1l1I111lIll11Ii111, III11Ii1i1llIlllI1I) end else l1I111Ili11lili1lII("Luraph Script:" .. (lll1IIlI1Ilii1lI1lI[lIlillIlI1i1llilI11ll - 1] or "") .. ": " .. ll1IIl1lii1lllI11li(i1IIii1iI1lII1I1iII), 0) end end lIl1lliii1IiiIiillI1I(lIll1lI111Iil1i1Ii11l, llIlllllIIilllllll1) return lIll1lI111Iil1i1Ii11l end local lIlIii1lllll1i1l1IiI1 = l111l1i1illiII1lI1i() return lIl1l1l11i1l11IlIilil(lIlIii1lllll1i1l1IiI1, llIlllllIIilllllll1)() end ilIl11i1lI1iiIili1l("LPH!", lIil1ll1ll1I111i1i1()) 
```
